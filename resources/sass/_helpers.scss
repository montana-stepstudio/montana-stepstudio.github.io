//***********************************
//			CLEARFIX
//***********************************

%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

//.container-with-floated-children {
//  @extend %clearfix;
//}


//***********************************
//        google shadow
//***********************************

@mixin google_shadow ($level) {

    @if $level == 1 {
        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
    } @else if $level == 2 {
        box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
    } @else if $level == 3 {
        box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
    } @else if $level == 4 {
        box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
    } @else if $level == 5 {
        box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);
    }

}

@mixin google_text_shadow ($level) {

    @if $level == 1 {
        text-shadow: 0 0 3px rgba(0,0,0,0.12), 0 0 2px rgba(0,0,0,0.24);
    } @else if $level == 2 {
        text-shadow: 0 0 6px rgba(0,0,0,0.16), 0 0 6px rgba(0,0,0,0.23);
    } @else if $level == 3 {
        text-shadow: 0 0 20px rgba(0,0,0,0.19), 0 0 6px rgba(0,0,0,0.23);
    } @else if $level == 4 {
        text-shadow: 0 0 28px rgba(0,0,0,0.25), 0 0 10px rgba(0,0,0,0.22);
    } @else if $level == 5 {
        text-shadow: 0 0 38px rgba(0,0,0,0.30), 0 0 12px rgba(0,0,0,0.22);
    }

}


//***********************************
//        RESPONSIVE IMAGES
//***********************************

%responsiveImg{
  img{
    width: auto !important;
    max-width: 100%;
    width: 100%;
    height: auto;
    float: left;
  }
}

//.container-of-responsive-image {
//  @extend %responsiveImg;
//}


//***********************************
//      SCREEN READER TEXT
//***********************************

.srt{
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

//.image-with-text-still-visible{
//  @extend %srt;  
//}

//***********************************
//     SHOW/HIDE HREF ON PRINT 
//***********************************

%printToggle[href]:after{
  content: "("attr(href)")";
  abbr[title]:after{
    content:"("attr(title)")";
  }
}

.srt a:after,
a[href^="javascript:"]:after,
a[href^="#"]:after {
  content: "";
}

//***********************************
//      PSEUDO ELEMENTS
//***********************************

%pseudo{
  display: block;
  content: '';
  position: absolute;
}


//***********************************
//       Typography Functions
//***********************************


// ### Determine the proper heading size

// Returns the proper heading size in `em` for a given heading level.
// @function getHeadingSize($headingLevel) {
//   @return 1em * (1 + (6 - $headingLevel) * 0.125);
// }

// ### Calculate the correct line-height

// Based on an element's font size, calculates line-height based on the
// vertical grid unit (`$vertUnit`).
// @function setLineHeight($fontSize) {
//   // - Make sure we're dealing with pixels only
//   $size: if(unit($fontSize) == "em", $fontSize / 1em * $defaultFontSize, $fontSize);
//   // - Get the appropriate proportion to apply to `$vertUnit` for line-height
//   $proportion: $size * 1.25 / $vertUnit;
//   // - Multiply by 10 to allow for tenth-value rounding
//   $forRounding: $proportion * 10;
//   // - Round to the nearest 5
//   $rounded: 5 * round($forRounding / 5);
//   // - Divide by 10 to bring us back to tenths (e.g. `15` becomes `1.5`)
//   $tenths: $rounded / 10;
//   // - Multiply the correct proportion by `$vertUnit` for the line-height
//   $lineHeight: $tenths * $vertUnit;
//   @return $lineHeight;
// }

// By setting this up as a mixin, it's easy to create relative sizes at
// various media breakpoints.
// @mixin setFontSizes($fontSize) {
//   // - Set the font baseline site-wide
//   body {
//     font-size: $fontSize;
//     line-height: setLineHeight($fontSize);
//   }
//   // - Increase font size for leads and blockquotes
//   blockquote,.post__lead {
//     font-size: $fontSize * 1.125;
//     line-height: setLineHeight($fontSize * 1.125);
//   }
//   // - Decrease font size for small tags and figcaptions
//   small,figcaption {
//     font-size: $fontSize * 0.75;
//     line-height: setLineHeight($fontSize * 0.75);
//   }
//   // - Reset heading sizes (for proper line-height)
//   @include setHeadingSize($fontSize);
// }

// // ### Calculate heading font sizes

// // Using a loop, call the `set-heading-size()` function and set heading sizes.
// @mixin setHeadingSize($fontSize) {
//   @for $i from 1 through 6 {
//     h#{$i} {
//       $headingSize: getHeadingSize($i);
//       font-size: $headingSize;
//       line-height: setLineHeight($headingSize);
//     }
//   }
// }




////************************************************************
////  RETINA IMAGE SUPPORT - WITH HOVER & ACTIVE STATES
////************************************************************

//DOCUMENTATION:

//https://github.com/AdamBrodzinski/Retina-Sprites-for-Compass

@mixin retina-sprite($name, $hover: false, $active: false) {
  @include _retina-sprite($name, $sprites, $sprites2x, $hover, $active);
}

// The general purpose retina sprite mixin.
//
//    @include retina-sprite(name, $spritemap1, $spritemap2)
//    @include retina-sprite(name, $spritemap1, $spritemap2[, $dimensions: true, $pad: 0])
//
//    If `dimensions` is true, then width/height will also be set.
//
//    if `pad` is non-zero, then that's how much padding the element will have (requires
//    $spacing on the sprite maps). Great for iPhone interfaces to make hit areas bigger.
//
@mixin _retina-sprite($name, $sprites, $sprites2x, $hover, $active, $dimensions: true, $pad: 0) {
  @if $dimensions == true {
    @include sprite-dimensions($sprites, $name);
  }
  background-image: sprite-url($sprites);
  background-position: sprite-position($sprites, $name, -$pad, -$pad);
  background-repeat: no-repeat;

  @if $hover == true {
    $name_hover: $name + _hover;
    &:hover {
      background-position: sprite-position($sprites, $name_hover, -$pad, -$pad);
    }
  }
  @if $active == true {
    $name_active: $name + _active;
    &:active {
      background-position: sprite-position($sprites, $name_active, -$pad, -$pad);
    }
  }

  @if $pad > 0 {
    padding: $pad;
  }

  @media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) {
    & {
      $pos: sprite-position($sprites2x, $name, -$pad * 2, -$pad * 2);
      background-image: sprite-url($sprites2x);
      background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
      @include background-size(ceil(image-width(sprite-path($sprites2x)) / 2) auto);
      //  sprite-path() returns the path of the generated sprite sheet, which
      //  image-width() calculates the width of. the ceil() is in place in case
      //  you have sprites that have an odd-number of pixels in width

      @if $hover == true {
        $name_hover: $name + _hover;    // create myButton_hover and assign it
        &:hover{
          $pos: sprite-position($sprites2x, $name_hover, -$pad * 2, -$pad * 2);
          background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
        }
      }
      @if $active == true {
        $name_active: $name + _active;    // create myButton_active and assign it
        &:active{
          $pos: sprite-position($sprites2x, $name_active, -$pad * 2, -$pad * 2);
          background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
        }
      }
    }
  }
}